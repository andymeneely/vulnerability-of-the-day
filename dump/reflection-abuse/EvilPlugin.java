import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class EvilPlugin {
	/**
	 * This method shows several ways of using unrestricted reflection to break Java encapsulation:
	 * 
	 * Disclose a private field
	 * 
	 * Tamper with a private field
	 * 
	 * Invoke a private method
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		APIConnection apiConnection = new APIConnection();

		// try to do the secret thing - won't work
		apiConnection.doSomething("password123");// guess the password - no luck

		// Disclose and tamper with the private fields
		System.out.println("===Disclosing & Tampering===");
		Field[] fields = apiConnection.getClass().getDeclaredFields();
		for (Field field : fields) {
			System.out.println("Taking a look at field: " + field.getName());
			try {
				field.setAccessible(true);
			} catch (SecurityException e) {
				System.err.println("Blocked by security manager. Nice try!!");
			}
			System.out.println("The secret token is: " + getField(field, apiConnection));
			System.out.println("Set the field: " + setField(field, apiConnection, "my own token!"));
			System.out.println("The secret token was changed to: " + getField(field, apiConnection));
			System.out.println("Trying authenticate with \"my own token!\"...");
			apiConnection.doSomething("my own token!");
		}

		// Now let's do this a shorter way - just use the API to invoke that private method anyway
		System.out.println("\n===Invoking===");
		Method[] declaredMethods = apiConnection.getClass().getDeclaredMethods();
		for (Method method : declaredMethods) {
			System.out.println("Examining method: " + method.getName());
			try {
				method.setAccessible(true);
			} catch (SecurityException e) {
				System.err.println("Blocked by security manager. Nice try!!");
			}
			// Only invoke methods with no parameters - just for the sake of this example
			if (method.getParameterTypes().length == 0) {
				System.out.println("Invoking method: " + method.getName());
				invokePrivateMethod(apiConnection, method);
			}
		}
	}

	private static String invokePrivateMethod(APIConnection apiConnection, Method method) {
		try {
			method.invoke(apiConnection, new Object[] {});
			return "Done!";
		} catch (IllegalArgumentException e) {
			return "Illegal argument";
		} catch (IllegalAccessException e) {
			return "Illegal access - permissions check";
		} catch (InvocationTargetException e) {
			return "Reflection issue with invoking on the target";
		}
	}

	// Return (disclose) the value in a private field
	private static String getField(Field field, APIConnection apiConnection) {
		try {
			return field.get(apiConnection).toString();
		} catch (IllegalArgumentException e) {
			return "Bad arguments";
		} catch (IllegalAccessException e) {
			System.err.println();
			return "Oops - permissions don't allow it";
		}
	}

	// Set (tamper) the value in a private field
	private static String setField(Field field, APIConnection apiConnection, String changeTo) {
		try {
			field.set(apiConnection, changeTo);
			return "Done!";
		} catch (IllegalArgumentException e) {
			return "Illegal argument";
		} catch (IllegalAccessException e) {
			return "Illegal access - permissions check";
		}
	}
}
