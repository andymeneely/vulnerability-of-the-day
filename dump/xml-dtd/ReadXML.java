import java.io.File;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;

/**
 * This class reads an untrusted XML input and prints out the top-level node
 * 
 * Sadly, embedding a Document Type Definition in an XML allows users to access the file system, or even
 * remote code. If the system is not configured to limit the entities, then a DoS is possible (aka an 'XML
 * bomb') is also possible.
 * 
 * @author Andy Meneely
 * 
 */
public class ReadXML {
	public static void main(String args[]) throws Exception {
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		// Sadly, these two often dont' work
		// factory.setValidating(false);
		// factory.setExpandEntityReferences(false);
		// Making this safe requires overriding the entity resolver and throwing an exception.
		DocumentBuilder builder = factory.newDocumentBuilder();
		/*
		 * builder.setEntityResolver(new EntityResolver() {
		 * 
		 * @Override public InputSource resolveEntity(String publicId, String systemId) throws SAXException,
		 * IOException { System.out.println("Resolving: " + publicId + ", " + systemId); throw new
		 * SAXException(new IllegalArgumentException( "No expanding entities for you!")); } });
		 */
		Document doc = builder.parse(new File(args[0]));
		System.out.println("The root element <"
				+ doc.getDocumentElement().getNodeName() + "> is "
				+ doc.getDocumentElement().getTextContent());
	}
}
