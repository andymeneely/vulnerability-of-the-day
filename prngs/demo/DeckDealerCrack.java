import java.util.HashMap;
import java.util.Map;

/**
 * This is a crack of the DeckDealer class. Here's the algorithm:
 * 
 * 1. Start up the DeckDealer - recording the times <br>
 * 2. We know the seed is in that range. So now we simulate the algorithm for each of those random seeds
 * offline. Build up a cache of solutions. <br>
 * 3. Run the DeckDealer's first shuffle. <br>
 * 4. Did we have that shuffle? If so, look up the seed, and now all future shuffles are perfectly
 * predictable. <br>
 * 
 */
public class DeckDealerCrack {
	private static Map<String, Long> cache = new HashMap<String, Long>(100000000);// 0.1 seconds worth

	public static void main(String[] args) {
		new DeckDealer().nextShuffle();// prime the classloader
		tryNanoTime();
		tryMilliTime();
	}

	private static void tryNanoTime() {
		System.out.println("Trying nanoseconds...");
		long startRange = System.nanoTime();
		DeckDealer deckDealer = new DeckDealer();
		long endRange = System.nanoTime();
		System.out.println("\tRandom seed is between " + startRange + " and " + endRange);
		System.out.println("\tComputing all " + (endRange - startRange) + " shuffles in that range...");
		for (long i = startRange - 10; i <= endRange + 10; i++) {
			cache.put(new DeckDealer(i).nextShuffle(), i);
		}

		String firstShuffle = deckDealer.nextShuffle();
		if (cache.containsKey(firstShuffle)) {
			System.out.println("\tGot it! Random seed was: " + cache.get(firstShuffle));
			DeckDealer crackedDealer = new DeckDealer(cache.get(firstShuffle));
			crackedDealer.nextShuffle(); // do the first shuffle like it did
			System.out.println("\tNext shuffle should be: " + crackedDealer.nextShuffle());
			System.out.println("\tActual shuffle is:      " + deckDealer.nextShuffle());
		} else {
			System.out.println("\tNo such luck.");
		}
	}

	private static void tryMilliTime() {
		System.out.println("Trying milliseconds...");
		long startRange = System.currentTimeMillis();
		DeckDealer deckDealer = new DeckDealer();
		long endRange = System.currentTimeMillis();
		System.out.println("\tRandom seed is between " + startRange + " and " + endRange);
		System.out.println("\tComputing all " + (endRange - startRange) + " shuffles in that range...");
		for (long i = startRange - 10; i <= endRange + 10; i++) {
			cache.put(new DeckDealer(i).nextShuffle(), i);
		}

		String firstShuffle = deckDealer.nextShuffle();
		if (cache.containsKey(firstShuffle)) {
			System.out.println("\tGot it! Random seed was: " + cache.get(firstShuffle));
			DeckDealer crackedDealer = new DeckDealer(cache.get(firstShuffle));
			crackedDealer.nextShuffle(); // do the first shuffle like it did
			System.out.println("\tNext shuffle should be: " + crackedDealer.nextShuffle());
			System.out.println("\tActual shuffle is:      " + deckDealer.nextShuffle());
		} else {
			System.out.println("\tNo such luck.");
		}
	}
}
